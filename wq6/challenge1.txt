CHALLENGE: Write an algorithm such that if an element in an NxN matrix is 0, itsâ€™ entire row and column are 0.
ASSUMPTIONS: locations of zeroes in the matrix cannot be predicted (akain other words are not patterned (otherwise we would hope to find a more specific method))

straightforward solution
------------------------------
zero-rows-and-columns(M):
	CO := []	#an initially empty list of xy coordinates
	for each row X in M:
	    for each column Y in M:
	    	if element == 0:
		    insert(CO, (X, Y))
	for each coordinate C in CO:
	    for each element E in M[C.X, E]:
	    	E := 0
	    for each element E in M[E, C.Y]:
	    	E := 0
------------------------------
This solution works, but has flaws:
     Since an xy coordinate is stored for every 0-element, an all-0 matrix causes n^2 memory usage
     Since a row and column are zeroed for every xy coordinate, an all-0 matrix would cause 2(n^3) operations during the write step, when only n^2 operations were really required.
     Every one of the n^2 comparisons potentially causes a branch misprediction. Because we assume zeroes cannot be predicted, we estimate that about 1/2 of the branch predictions would be wrong.
TIME: O(1 +    #initialize
      n^2 +    #compare every element to 0
      2(n^3))  #potentially write 0 to every element in each row, then again for each column. In other words, there are n^2 elements, each of which can be zeroed 2n times at most.
==>   O(n^3)
SPACE: O(n^2)



a better solution
------------------------------
zero-rows-and-columns(M):
	VP := []	#an nx1 (vertical) vector initialized to 1s
	HP := []	#a 1xn (horizontal) vector initialized to 1s
	for each row X in M:
	    for each element E in X:
	    	VP[|E|] := VP[|E|] * E	#where |E| is the index
	for each column Y in M:
	    for each element E in Y:
	    	HP[|E|] := HP[|E|] * E
	for each P in VP:
	    if P == 0:
	       for each E in M[|P|,E]
	       	   E := 0
	for each P in HP:
	    if P == 0:
	       for each E in M[E, |P|]:
	       	   E := 0
------------------------------
This solution is preferable to the first solution:
     Memory usage grows as 2n instead of n^2 - a huge improvement on large arrays
     Each row and column can only be zeroed once, so each element can only be zeroed twice instead of n times.
     Potential branch mispredictions greatly reduced, since only 2n comparisons are made instead of n^2
     With much fewer branches and smaller memory usage, the algorithm lends itself well to parallelization on a GPU, so it is practical as well.
     Because we multiply across rows and columns, short circuiting could also be implemented, potentially saving much computation on large arrays
TIME: O(2n + 	#initialize
      2(n^2) +	#multiply across rows and columns
      2(n^2))	#zero out rows, then columns
==>   O(n^2)
SPACE: theta(2n)
      


If someone finds a better solution, please contribute.
